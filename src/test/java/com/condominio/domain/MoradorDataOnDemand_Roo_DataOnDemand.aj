// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.condominio.domain;

import com.condominio.domain.Morador;
import com.condominio.domain.MoradorDataOnDemand;
import com.condominio.repository.MoradorRepository;
import com.condominio.service.MoradorService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MoradorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MoradorDataOnDemand: @Component;
    
    private Random MoradorDataOnDemand.rnd = new SecureRandom();
    
    private List<Morador> MoradorDataOnDemand.data;
    
    @Autowired
    MoradorService MoradorDataOnDemand.moradorService;
    
    @Autowired
    MoradorRepository MoradorDataOnDemand.moradorRepository;
    
    public Morador MoradorDataOnDemand.getNewTransientMorador(int index) {
        Morador obj = new Morador();
        setCpf(obj, index);
        setDataNascimento(obj, index);
        setEmail(obj, index);
        setNome(obj, index);
        setNumero_apartamento(obj, index);
        return obj;
    }
    
    public void MoradorDataOnDemand.setCpf(Morador obj, int index) {
        String cpf = "cpfxxxxxx_" + index;
        obj.setCpf(cpf);
    }
    
    public void MoradorDataOnDemand.setDataNascimento(Morador obj, int index) {
        String dataNascimento = "dataNascimento_" + index;
        obj.setDataNascimento(dataNascimento);
    }
    
    public void MoradorDataOnDemand.setEmail(Morador obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void MoradorDataOnDemand.setNome(Morador obj, int index) {
        String nome = "nome_" + index;
        if (nome.length() > 50) {
            nome = nome.substring(0, 50);
        }
        obj.setNome(nome);
    }
    
    public void MoradorDataOnDemand.setNumero_apartamento(Morador obj, int index) {
        String numero_apartamento = "numero_apartamento_" + index;
        obj.setNumero_apartamento(numero_apartamento);
    }
    
    public Morador MoradorDataOnDemand.getSpecificMorador(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Morador obj = data.get(index);
        Long id = obj.getId();
        return moradorService.findMorador(id);
    }
    
    public Morador MoradorDataOnDemand.getRandomMorador() {
        init();
        Morador obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return moradorService.findMorador(id);
    }
    
    public boolean MoradorDataOnDemand.modifyMorador(Morador obj) {
        return false;
    }
    
    public void MoradorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = moradorService.findMoradorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Morador' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Morador>();
        for (int i = 0; i < 10; i++) {
            Morador obj = getNewTransientMorador(i);
            try {
                moradorService.saveMorador(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            moradorRepository.flush();
            data.add(obj);
        }
    }
    
}
