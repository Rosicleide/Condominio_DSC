// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.condominio.domain;

import com.condominio.domain.MoradorDataOnDemand;
import com.condominio.domain.Reclamacao;
import com.condominio.domain.ReclamacaoDataOnDemand;
import com.condominio.repository.ReclamacaoRepository;
import com.condominio.service.ReclamacaoService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ReclamacaoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ReclamacaoDataOnDemand: @Component;
    
    private Random ReclamacaoDataOnDemand.rnd = new SecureRandom();
    
    private List<Reclamacao> ReclamacaoDataOnDemand.data;
    
    @Autowired
    MoradorDataOnDemand ReclamacaoDataOnDemand.moradorDataOnDemand;
    
    @Autowired
    ReclamacaoService ReclamacaoDataOnDemand.reclamacaoService;
    
    @Autowired
    ReclamacaoRepository ReclamacaoDataOnDemand.reclamacaoRepository;
    
    public Reclamacao ReclamacaoDataOnDemand.getNewTransientReclamacao(int index) {
        Reclamacao obj = new Reclamacao();
        setDescricao(obj, index);
        return obj;
    }
    
    public void ReclamacaoDataOnDemand.setDescricao(Reclamacao obj, int index) {
        String descricao = "descricao_" + index;
        if (descricao.length() > 1000) {
            descricao = descricao.substring(0, 1000);
        }
        obj.setDescricao(descricao);
    }
    
    public Reclamacao ReclamacaoDataOnDemand.getSpecificReclamacao(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Reclamacao obj = data.get(index);
        Long id = obj.getId();
        return reclamacaoService.findReclamacao(id);
    }
    
    public Reclamacao ReclamacaoDataOnDemand.getRandomReclamacao() {
        init();
        Reclamacao obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return reclamacaoService.findReclamacao(id);
    }
    
    public boolean ReclamacaoDataOnDemand.modifyReclamacao(Reclamacao obj) {
        return false;
    }
    
    public void ReclamacaoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = reclamacaoService.findReclamacaoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Reclamacao' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Reclamacao>();
        for (int i = 0; i < 10; i++) {
            Reclamacao obj = getNewTransientReclamacao(i);
            try {
                reclamacaoService.saveReclamacao(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            reclamacaoRepository.flush();
            data.add(obj);
        }
    }
    
}
